@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BusinessLogic.DTOs
@implements IAsyncDisposable
@inject IJSRuntime JS

<h3>✈ Flight Information Board</h3>
<p>@connectionStatus</p>

<table class="table" @key="flights">
    <thead>
        <tr>
            <th>Flight</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var flight in flights)
        {
            <tr>
                <td>@flight.FlightNumber</td>
                <td>@flight.Status</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private HubConnection? hubConnection;
    private List<FlightDto> flights = new();
    private string connectionStatus = "🔄 Connecting...";

    protected override async Task OnInitializedAsync()
    {
        var http = new HttpClient { BaseAddress = new Uri("http://localhost:5000/") };
        flights = await http.GetFromJsonAsync<List<FlightDto>>("api/flight/list") ?? new();

        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/flightHub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<int, string>("FlightStatusUpdated", async (flightId, status) =>
        {
            Console.WriteLine($"⚡ Received: {flightId} = {status}");

            var f = flights.FirstOrDefault(x => x.FlightId == flightId);
            if (f != null)
            {
                f.Status = status;
            }
            await InvokeAsync(StateHasChanged);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && hubConnection is not null)
        {
            await hubConnection.StartAsync();
            Console.WriteLine("✅ SignalR connected");
            await JS.InvokeVoidAsync("console.log", "[Client] Hub connected");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}
